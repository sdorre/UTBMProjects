#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include "mpi.h"

long factorial(int n){
	if (n<=0){
		return 1;
	} else {
		long  res = n ;
		while (--n>1){
			res *=n;
		}
		return res;
	}
}

int main(int argc, char** argv){
	if(argc<2){
		printf("usage: %s <nb_iter>\n", argv[0]);
		return 1;
	}

	int niter =atoi(argv[1]);
	long count =0, mycount;
	int myid, numprocs, proc;
	MPI_Status status;
	int master = 0;
	int tag=123;
//	int *stream_id;
	int array[niter];
	int array2[niter];
	int i;
	int ierr, num_rows_to_receive;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);

	if(myid==0){
		int avg_rows_per_process = niter / numprocs;

   	      /* initialize an array */

     	 	for(i = 0; i < niter; i++) {
    			array[i] = i + 1;
         	}
		int an_id;
		for( an_id = 1; an_id < numprocs; an_id++) {
			int start_row = an_id*avg_rows_per_process + 1;
			int end_row   = (an_id + 1)*avg_rows_per_process;

			if((niter - end_row) < avg_rows_per_process)
				end_row = niter - 1;

			int num_rows_to_send = end_row - start_row + 1;

			ierr = MPI_Send( &num_rows_to_send, 1 , MPI_INT, MPI_ANY_SOURCE, tag, MPI_COMM_WORLD);

			ierr = MPI_Send( &array[start_row], num_rows_to_send, MPI_INT,
                  	an_id, tag, MPI_COMM_WORLD);
         	}
	
		for(i=0; i<avg_rows_per_process +1; ++i){
			count=(factorial(4*array[i])*(1103+26390*array[i])/(pow(factorial(array[i]),4)*pow(396,4*array[i])));
		}
		printf("sum %i calculated by root process\n", count);

		for(proc=1; proc<numprocs; proc++){
			MPI_Recv(&mycount, 1, MPI_REAL, proc, tag, MPI_COMM_WORLD, &status);
			count+=mycount;
		}
		long pi = 9801/(2*sqrt(2)*count);

		printf("nb iteration= %d , estimation de Pi %ld \n", niter*numprocs, pi);
	} else {

		ierr = MPI_Recv( &num_rows_to_receive, 1, MPI_INT, master, tag, MPI_COMM_WORLD, &status);
          
         	ierr = MPI_Recv( &array2, num_rows_to_receive, MPI_INT, master, tag, MPI_COMM_WORLD, &status);
		
		int  num_rows_received = num_rows_to_receive;

	        int partial_sum = 0;
        	for(i = 0; i < num_rows_received; i++) {
            		mycount += (factorial(4*array2[i])*(1103+26390*array2[i])/(pow(factorial(array2[i]),4)*pow(396,4*array2[i])));
		}
		printf("Processor %d sending results = %ld to master process\n", myid, mycount);
		MPI_Send(&mycount, 1, MPI_REAL,	master, tag, MPI_COMM_WORLD);
	}

	MPI_Finalize();
	return 0;
}


