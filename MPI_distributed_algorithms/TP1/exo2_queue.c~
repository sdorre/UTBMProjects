#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include "mpi.h"

//container for one element of the queue, and a link to the next element
struct queueElement{
	int data;
	struct queueElement *next;
};

//the structure queue contains the first and the last elements
struct queue{
	struct queueElement *front;
	struct queueElement *rear;
};

void push_back(struct queue *q, int value){

	struct queueElement *newPtr;
	newPtr = malloc(sizeof(struct queueElement));
	
	if (newPtr != NULL){
		newPtr->data = value;
		newPtr->next = NULL;
			
		if(isEmpty(*q)){
			//printf("first push\n");
			q->front = newPtr;
		} else {
			//printf("seconds push\n");
			q->rear = newPtr;
		}
	} else {
		printf("%d is not inserted. No Memory available.\n", value);
	}
}

int pop(struct queue *q){
	int value;
	struct queueElement *tempPtr;

	value = q->front->data;
	tempPtr = q->front;
	
	q->front = q->front->next;
	if (q->front == NULL){
		q->rear = NULL;
	}
	free (tempPtr);
	return value;
}

int isEmpty(struct queue q){
	return q.front==NULL;
}

int count_queue(struct queue *q){
	int cpt=0;
	struct queue *copy = q;
	
	while (copy->front!=NULL){
		printf("counter copy->front : %p\n", copy->front);
		copy->front = copy->front->next;
		cpt+=1;
	}
	
	return cpt;
}

long factorial(int n){
	if (n<=0){
		return 1;
	} else {
		long  res = n ;
		while (--n>1){
			res *=n;
		}
		return res;
	}
}

int main(int argc, char** argv){
	if(argc<2){
		printf("usage: %s <nb_iter>\n", argv[0]);
		return 1;
	}

	int niter =atoi(argv[1]);
	long count =0, mycount = 0;
	int myid, numprocs, proc;
	MPI_Status status;
	int master = 0;
	int tag=123;
//	int *stream_id;
	
	struct queue *q = malloc(sizeof(struct queue));	

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);

	if(!isEmpty(*q)){
		printf("testtest");
		int value = pop(q);
		mycount=(factorial(4*value)*(1103+26390*value)/(pow(factorial(value),4)*pow(396,4*value)));
	}

	if(myid==0){
	//It might be the man process so, it had to queue all N receive in parameter.
	printf("main process started \n");
		int i;
		for(i=1; i<niter; ++i){
			push_back(q, i);
		}
		//printf("count of queue : %d\n", count_queue(q));
		//and finally it receive the calculation of each process 

		count = mycount;
		for(proc=1; proc<numprocs; proc++){
			printf("reveive calculation from process %d\n", proc);
			MPI_Recv(&mycount, 1, MPI_REAL, proc, tag, MPI_COMM_WORLD, &status);
			count+=mycount;
		}
		long pi = 9801/(2*sqrt(2)*count);

		printf("process %d , calculate on value of N:  %ld \n", numprocs, pi);
	} else {
		//it must be a slave process, so I need to calculate one value of the queue and send to the main process
		//printf("secondary process started\n");
		//printf("count of queue : %d\n", count_queue(q));
		while(!isEmpty(*q)){
			printf("testtest\n");
			int value = pop(q);
			printf("value : %d\n", value);
			mycount+=(factorial(4*value)*(1103+26390*value)/(pow(factorial(value),4)*pow(396,4*value)));
		}
		
			printf("Processor %d sending results = %ld to master process\n", myid, mycount);
			MPI_Send(&mycount, 1, MPI_REAL, master, tag, MPI_COMM_WORLD);
		
	}

	MPI_Finalize();
	return 0;
}


